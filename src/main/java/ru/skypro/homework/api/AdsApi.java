/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.skypro.homework.api;

import ru.skypro.homework.model.Ads;
import ru.skypro.homework.model.Comment;
import ru.skypro.homework.model.CreateAds;
import ru.skypro.homework.model.FullAds;
import ru.skypro.homework.model.ResponseWrapperAds;
import ru.skypro.homework.model.ResponseWrapperComment;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-16T21:17:34.091476600+03:00[Europe/Moscow]")
@Validated
@Tag(name = "ads", description = "the ads API")
public interface AdsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /ads : addAds
     *
     * @param properties  (required)
     * @param image  (required)
     * @return Created (status code 201)
     *         or Not Found (status code 404)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "addAds",
        summary = "addAds",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Ads.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ads",
        produces = { "*/*" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<Ads> addAds(
        @Parameter(name = "properties", description = "", required = true) @Valid @RequestParam(value = "properties", required = true) CreateAds properties,
        @Parameter(name = "image", description = "", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ads/{ad_pk}/comments : addComments
     *
     * @param adPk  (required)
     * @param comment  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "addComments",
        summary = "addComments",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ads/{ad_pk}/comments",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Comment> addComments(
        @Parameter(name = "ad_pk", description = "", required = true) @PathVariable("ad_pk") String adPk,
        @Parameter(name = "Comment", description = "", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"author\" : 6, \"pk\" : 1, \"text\" : \"text\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ads/{ad_pk}/comments/{id} : deleteComments
     *
     * @param adPk  (required)
     * @param id  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteComments",
        summary = "deleteComments",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ads/{ad_pk}/comments/{id}"
    )
    default ResponseEntity<Void> deleteComments(
        @Parameter(name = "ad_pk", description = "", required = true) @PathVariable("ad_pk") String adPk,
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getALLAds",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperAds.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ads",
        produces = { "*/*" }
    )
    default ResponseEntity<ResponseWrapperAds> getALLAds(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }, { \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/{id} : getFullAd
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAds",
        summary = "getFullAd",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = FullAds.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ads/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<FullAds> getAds(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"image\" : [ \"image\", \"image\" ], \"authorLastName\" : \"authorLastName\", \"authorFirstName\" : \"authorFirstName\", \"phone\" : \"phone\", \"price\" : 6, \"description\" : \"description\", \"pk\" : 0, \"title\" : \"title\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/me : getAdsMe
     *
     * @param authenticated  (optional)
     * @param authorities0Authority  (optional)
     * @param credentials  (optional)
     * @param details  (optional)
     * @param principal  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAdsMeUsingGET",
        summary = "getAdsMe",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperAds.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ads/me",
        produces = { "*/*" }
    )
    default ResponseEntity<ResponseWrapperAds> getAdsMeUsingGET(
        @Parameter(name = "authenticated", description = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
        @Parameter(name = "authorities[0].authority", description = "") @Valid @RequestParam(value = "authorities[0].authority", required = false) String authorities0Authority,
        @Parameter(name = "credentials", description = "") @Valid @RequestParam(value = "", required = false) Object credentials,
        @Parameter(name = "details", description = "") @Valid @RequestParam(value = "", required = false) Object details,
        @Parameter(name = "principal", description = "") @Valid @RequestParam(value = "", required = false) Object principal
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }, { \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/{ad_pk}/comments : getComments
     *
     * @param adPk  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getComments",
        summary = "getComments",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperComment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ads/{ad_pk}/comments",
        produces = { "*/*" }
    )
    default ResponseEntity<ResponseWrapperComment> getComments(
        @Parameter(name = "ad_pk", description = "", required = true) @PathVariable("ad_pk") String adPk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"createdAt\" : \"createdAt\", \"author\" : 6, \"pk\" : 1, \"text\" : \"text\" }, { \"createdAt\" : \"createdAt\", \"author\" : 6, \"pk\" : 1, \"text\" : \"text\" } ] }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/{ad_pk}/comments/{id} : getComments
     *
     * @param adPk  (required)
     * @param id  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getComments1",
        summary = "getComments",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ads/{ad_pk}/comments/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<Comment> getComments1(
        @Parameter(name = "ad_pk", description = "", required = true) @PathVariable("ad_pk") String adPk,
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"author\" : 6, \"pk\" : 1, \"text\" : \"text\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ads/{id} : removeAds
     *
     * @param id  (required)
     * @return No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "removeAds",
        summary = "removeAds",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ads/{id}"
    )
    default ResponseEntity<Void> removeAds(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /ads/{id} : updateAds
     *
     * @param id  (required)
     * @param createAds  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateAds",
        summary = "updateAds",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Ads.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/ads/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Ads> updateAds(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
        @Parameter(name = "CreateAds", description = "", required = true) @Valid @RequestBody CreateAds createAds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"image\" : [ \"image\", \"image\" ], \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /ads/{ad_pk}/comments/{id} : updateComments
     *
     * @param adPk  (required)
     * @param id  (required)
     * @param comment  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Forbidden (status code 403)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateComments",
        summary = "updateComments",
        tags = { "Объявления" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/ads/{ad_pk}/comments/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Comment> updateComments(
        @Parameter(name = "ad_pk", description = "", required = true) @PathVariable("ad_pk") String adPk,
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
        @Parameter(name = "Comment", description = "", required = true) @Valid @RequestBody Comment comment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"createdAt\" : \"createdAt\", \"author\" : 6, \"pk\" : 1, \"text\" : \"text\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
